var app=function(){"use strict";function n(){}const t=n=>n;function s(n){return n()}function e(){return Object.create(null)}function a(n){n.forEach(s)}function o(n){return"function"==typeof n}function p(n,t){return n!=n?t==t:n!==t}function c(n,t,s,e){return n[1]&&e?function(n,t){for(const s in t)n[s]=t[s];return n}(s.ctx.slice(),n[1](e(t))):s.ctx}const l="undefined"!=typeof window;let i=l?()=>window.performance.now():()=>Date.now(),r=l?n=>requestAnimationFrame(n):n;const u=new Set;function d(n){u.forEach((t=>{t.c(n)||(u.delete(t),t.f())})),0!==u.size&&r(d)}function k(n,t){n.appendChild(t)}function g(n){if(!n)return document;const t=n.getRootNode?n.getRootNode():n.ownerDocument;return t&&t.host?t:n.ownerDocument}function f(n){const t=b("style");return function(n,t){k(n.head||n,t),t.sheet}(g(n),t),t.sheet}function m(n,t,s){n.insertBefore(t,s||null)}function h(n){n.parentNode&&n.parentNode.removeChild(n)}function b(n){return document.createElement(n)}function v(n){return document.createTextNode(n)}function y(){return v(" ")}function $(n,t,s){null==s?n.removeAttribute(t):n.getAttribute(t)!==s&&n.setAttribute(t,s)}function w(n,t){t=""+t,n.data!==t&&(n.data=t)}function x(n,t,s){n.classList[s?"add":"remove"](t)}function I(n,t,{bubbles:s=!1,cancelable:e=!1}={}){const a=document.createEvent("CustomEvent");return a.initCustomEvent(n,s,e,t),a}const M=new Map;let O,E=0;function H(n,t,s,e,a,o,p,c=0){const l=16.666/e;let i="{\n";for(let n=0;n<=1;n+=l){const e=t+(s-t)*o(n);i+=100*n+`%{${p(e,1-e)}}\n`}const r=i+`100% {${p(s,1-s)}}\n}`,u=`__svelte_${function(n){let t=5381,s=n.length;for(;s--;)t=(t<<5)-t^n.charCodeAt(s);return t>>>0}(r)}_${c}`,d=g(n),{stylesheet:k,rules:m}=M.get(d)||function(n,t){const s={stylesheet:f(t),rules:{}};return M.set(n,s),s}(d,n);m[u]||(m[u]=!0,k.insertRule(`@keyframes ${u} ${r}`,k.cssRules.length));const h=n.style.animation||"";return n.style.animation=`${h?`${h}, `:""}${u} ${e}ms linear ${a}ms 1 both`,E+=1,u}function T(n,t){const s=(n.style.animation||"").split(", "),e=s.filter(t?n=>n.indexOf(t)<0:n=>-1===n.indexOf("__svelte")),a=s.length-e.length;a&&(n.style.animation=e.join(", "),E-=a,E||r((()=>{E||(M.forEach((n=>{const{ownerNode:t}=n.stylesheet;t&&h(t)})),M.clear())})))}function L(n){O=n}function _(){if(!O)throw new Error("Function called outside component initialization");return O}const C=[],j=[];let A=[];const P=[],N=Promise.resolve();let S=!1;function D(){S||(S=!0,N.then(W))}function R(n){A.push(n)}function U(n){P.push(n)}const z=new Set;let q,B=0;function W(){if(0!==B)return;const n=O;do{try{for(;B<C.length;){const n=C[B];B++,L(n),G(n.$$)}}catch(n){throw C.length=0,B=0,n}for(L(null),C.length=0,B=0;j.length;)j.pop()();for(let n=0;n<A.length;n+=1){const t=A[n];z.has(t)||(z.add(t),t())}A.length=0}while(C.length);for(;P.length;)P.pop()();S=!1,z.clear(),L(n)}function G(n){if(null!==n.fragment){n.update(),a(n.before_update);const t=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,t),n.after_update.forEach(R)}}function F(n,t,s){n.dispatchEvent(I(`${t?"intro":"outro"}${s}`))}const V=new Set;let Y;function J(n,t){n&&n.i&&(V.delete(n),n.i(t))}function K(n,t,s,e){if(n&&n.o){if(V.has(n))return;V.add(n),Y.c.push((()=>{V.delete(n),e&&(s&&n.d(1),e())})),n.o(t)}else e&&e()}const Q={duration:0};function X(s,e,p,c){const l={direction:"both"};let k=e(s,p,l),g=c?0:1,f=null,m=null,h=null;function b(){h&&T(s,h)}function v(n,t){const s=n.b-g;return t*=Math.abs(s),{a:g,b:n.b,d:s,duration:t,start:n.start,end:n.start+t,group:n.group}}function y(e){const{delay:o=0,duration:p=300,easing:c=t,tick:l=n,css:y}=k||Q,$={start:i()+o,b:e};e||($.group=Y,Y.r+=1),f||m?m=$:(y&&(b(),h=H(s,g,e,p,o,c,y)),e&&l(0,1),f=v($,p),R((()=>F(s,e,"start"))),function(n){let t;0===u.size&&r(d),new Promise((s=>{u.add(t={c:n,f:s})}))}((n=>{if(m&&n>m.start&&(f=v(m,p),m=null,F(s,f.b,"start"),y&&(b(),h=H(s,g,f.b,f.duration,0,c,k.css))),f)if(n>=f.end)l(g=f.b,1-g),F(s,f.b,"end"),m||(f.b?b():--f.group.r||a(f.group.c)),f=null;else if(n>=f.start){const t=n-f.start;g=f.a+f.d*c(t/f.duration),l(g,1-g)}return!(!f&&!m)})))}return{run(n){o(k)?(q||(q=Promise.resolve(),q.then((()=>{q=null}))),q).then((()=>{k=k(l),y(n)})):y(n)},end(){b(),f=m=null}}}function Z(n,t,s){const e=n.$$.props[t];void 0!==e&&(n.$$.bound[e]=s,s(n.$$.ctx[e]))}function nn(n){n&&n.c()}function tn(n,t,e,p){const{fragment:c,after_update:l}=n.$$;c&&c.m(t,e),p||R((()=>{const t=n.$$.on_mount.map(s).filter(o);n.$$.on_destroy?n.$$.on_destroy.push(...t):a(t),n.$$.on_mount=[]})),l.forEach(R)}function sn(n,t){const s=n.$$;null!==s.fragment&&(!function(n){const t=[],s=[];A.forEach((e=>-1===n.indexOf(e)?t.push(e):s.push(e))),s.forEach((n=>n())),A=t}(s.after_update),a(s.on_destroy),s.fragment&&s.fragment.d(t),s.on_destroy=s.fragment=null,s.ctx=[])}function en(t,s,o,p,c,l,i,r=[-1]){const u=O;L(t);const d=t.$$={fragment:null,ctx:[],props:l,update:n,not_equal:c,bound:e(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(s.context||(u?u.$$.context:[])),callbacks:e(),dirty:r,skip_bound:!1,root:s.target||u.$$.root};i&&i(d.root);let k=!1;if(d.ctx=o?o(t,s.props||{},((n,s,...e)=>{const a=e.length?e[0]:s;return d.ctx&&c(d.ctx[n],d.ctx[n]=a)&&(!d.skip_bound&&d.bound[n]&&d.bound[n](a),k&&function(n,t){-1===n.$$.dirty[0]&&(C.push(n),D(),n.$$.dirty.fill(0)),n.$$.dirty[t/31|0]|=1<<t%31}(t,n)),s})):[],d.update(),k=!0,a(d.before_update),d.fragment=!!p&&p(d.ctx),s.target){if(s.hydrate){const n=function(n){return Array.from(n.childNodes)}(s.target);d.fragment&&d.fragment.l(n),n.forEach(h)}else d.fragment&&d.fragment.c();s.intro&&J(t.$$.fragment),tn(t,s.target,s.anchor,s.customElement),W()}L(u)}class an{$destroy(){sn(this,1),this.$destroy=n}$on(t,s){if(!o(s))return n;const e=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return e.push(s),()=>{const n=e.indexOf(s);-1!==n&&e.splice(n,1)}}$set(n){var t;this.$$set&&(t=n,0!==Object.keys(t).length)&&(this.$$.skip_bound=!0,this.$$set(n),this.$$.skip_bound=!1)}}const on=n=>({intersecting:1&n,entry:2&n,observer:4&n}),pn=n=>({intersecting:n[0],entry:n[1],observer:n[2]});function cn(n){let t;const s=n[9].default,e=function(n,t,s,e){if(n){const a=c(n,t,s,e);return n[0](a)}}(s,n,n[8],pn);return{c(){e&&e.c()},m(n,s){e&&e.m(n,s),t=!0},p(n,[a]){e&&e.p&&(!t||263&a)&&function(n,t,s,e,a,o){if(a){const p=c(t,s,e,o);n.p(p,a)}}(e,s,n,n[8],t?function(n,t,s,e){if(n[2]&&e){const a=n[2](e(s));if(void 0===t.dirty)return a;if("object"==typeof a){const n=[],s=Math.max(t.dirty.length,a.length);for(let e=0;e<s;e+=1)n[e]=t.dirty[e]|a[e];return n}return t.dirty|a}return t.dirty}(s,n[8],a,on):function(n){if(n.ctx.length>32){const t=[],s=n.ctx.length/32;for(let n=0;n<s;n++)t[n]=-1;return t}return-1}(n[8]),pn)},i(n){t||(J(e,n),t=!0)},o(n){K(e,n),t=!1},d(n){e&&e.d(n)}}}function ln(n,t,s){let{$$slots:e={},$$scope:a}=t,{element:o=null}=t,{once:p=!1}=t,{intersecting:c=!1}=t,{root:l=null}=t,{rootMargin:i="0px"}=t,{threshold:r=0}=t,{entry:u=null}=t,{observer:d=null}=t;const k=function(){const n=_();return(t,s,{cancelable:e=!1}={})=>{const a=n.$$.callbacks[t];if(a){const o=I(t,s,{cancelable:e});return a.slice().forEach((t=>{t.call(n,o)})),!o.defaultPrevented}return!0}}();let g=null,f=null;const m=()=>{s(2,d=new IntersectionObserver((n=>{n.forEach((n=>{s(1,u=n),s(0,c=n.isIntersecting)}))}),{root:l,rootMargin:i,threshold:r}))};var h;return h=()=>(m(),()=>{d&&(d.disconnect(),s(2,d=null))}),_().$$.on_mount.push(h),function(n){_().$$.after_update.push(n)}((async()=>{null!==u&&(k("observe",u),u.isIntersecting&&(k("intersect",u),o&&p&&d?.unobserve(o))),await(D(),N),null!==o&&o!==f&&(d?.observe(o),null!==f&&d?.unobserve(f),f=o),g&&i!==g&&(d?.disconnect(),f=null,m()),g=i})),n.$$set=n=>{"element"in n&&s(3,o=n.element),"once"in n&&s(4,p=n.once),"intersecting"in n&&s(0,c=n.intersecting),"root"in n&&s(5,l=n.root),"rootMargin"in n&&s(6,i=n.rootMargin),"threshold"in n&&s(7,r=n.threshold),"entry"in n&&s(1,u=n.entry),"observer"in n&&s(2,d=n.observer),"$$scope"in n&&s(8,a=n.$$scope)},[c,u,d,o,p,l,i,r,a,e]}class rn extends an{constructor(n){super(),en(this,n,ln,cn,p,{element:3,once:4,intersecting:0,root:5,rootMargin:6,threshold:7,entry:1,observer:2})}}function un(n,{delay:s=0,duration:e=400,easing:a=t}={}){const o=+getComputedStyle(n).opacity;return{delay:s,duration:e,easing:a,css:n=>"opacity: "+n*o}}function dn(t){let s,e;return{c(){s=b("div"),s.textContent="Hello world",e=y()},m(n,a){m(n,s,a),t[5](s),m(n,e,a)},p:n,d(n){n&&h(s),t[5](null),n&&h(e)}}}function kn(t){let s,e;return{c(){s=b("div"),s.textContent="Hello world",e=y()},m(n,a){m(n,s,a),t[7](s),m(n,e,a)},p:n,d(n){n&&h(s),t[7](null),n&&h(e)}}}function gn(n){let t,s,e;return{c(){t=b("div"),t.textContent="Hello world"},m(n,s){m(n,t,s),e=!0},i(n){e||(R((()=>{e&&(s||(s=X(t,un,{delay:200},!0)),s.run(1))})),e=!0)},o(n){s||(s=X(t,un,{delay:200},!1)),s.run(0),e=!1},d(n){n&&h(t),n&&s&&s.end()}}}function fn(n){let t,s,e,o=n[4]&&gn();return{c(){t=b("div"),o&&o.c(),s=y()},m(a,p){m(a,t,p),o&&o.m(t,null),n[9](t),m(a,s,p),e=!0},p(n,s){n[4]?o?16&s&&J(o,1):(o=gn(),o.c(),J(o,1),o.m(t,null)):o&&(Y={r:0,c:[],p:Y},K(o,1,1,(()=>{o=null})),Y.r||a(Y.c),Y=Y.p)},i(n){e||(J(o),e=!0)},o(n){K(o),e=!1},d(e){e&&h(t),o&&o.d(),n[9](null),e&&h(s)}}}function mn(n){let t,s,e,a,o,p,c,l,i,r,u,d,g,f,I,M,O,E,H,T,L,_,C,A,P,N,S,D,R,z,q,B,W,G,F,V,Y,Q,X,en,an,on,pn,cn,ln,un,gn,mn,hn,bn,vn,yn,$n,wn,xn,In,Mn,On,En,Hn,Tn,Ln,_n,Cn,jn,An,Pn,Nn,Sn,Dn,Rn,Un,zn,qn,Bn,Wn,Gn,Fn,Vn,Yn,Jn,Kn,Qn,Xn,Zn,nt,tt,st,et,at,ot,pt,ct,lt,it,rt,ut,dt,kt,gt=n[4]?"Element is in view":"Element is not in view",ft=n[2]?"Element is in view":"Element is not in view";function mt(t){n[6](t)}let ht={element:n[0],$$slots:{default:[dn]},$$scope:{ctx:n}};function bt(t){n[8](t)}void 0!==n[4]&&(ht.intersecting=n[4]),q=new rn({props:ht}),j.push((()=>Z(q,"intersecting",mt)));let vt={once:!0,element:n[1],$$slots:{default:[kn]},$$scope:{ctx:n}};return void 0!==n[2]&&(vt.intersecting=n[2]),pn=new rn({props:vt}),j.push((()=>Z(pn,"intersecting",bt))),In=new rn({props:{element:n[3],$$slots:{default:[fn,({intersecting:n})=>({4:n}),({intersecting:n})=>n?16:0]},$$scope:{ctx:n}}}),{c(){t=b("main"),s=b("h1"),s.textContent="svelte-intersection-observer",e=y(),a=b("p"),a.innerHTML='<a href="https://npmjs.com/package/svelte-intersection-observer"><img src="https://img.shields.io/npm/v/svelte-intersection-observer.svg?color=%23ff3e00&amp;style=for-the-badge" alt="NPM"/></a>',o=y(),p=b("blockquote"),p.innerHTML='<p>Detect if an element is in the viewport using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a>.</p>',c=y(),l=b("p"),l.innerHTML='<a href="git+https://github.com/metonym/svelte-intersection-observer.git">GitHub repo</a>',i=y(),r=b("p"),r.innerHTML='Try it in the <a href="https://svelte.dev/repl/8cd2327a580c4f429c71f7df999bd51d">Svelte REPL</a>.',u=y(),d=b("p"),d.innerHTML="<strong>Table of Contents</strong>",g=b("ul"),g.innerHTML='<li><a href="#installation">Installation</a></li> \n<li><a href="#usage">Usage</a></li> \n<ul><li><a href="#basic">Basic</a></li> \n<li><a href="#once">Once</a></li> \n<li><a href="#let%3Aintersecting">let:intersecting</a></li> \n<li><a href="#on%3Aobserve-event">on:observe event</a></li> \n<li><a href="#on%3Aintersect-event">on:intersect event</a></li> \n</ul><li><a href="#api">API</a></li> \n<ul><li><a href="#props">Props</a></li> \n<li><a href="#dispatched-events">Dispatched events</a></li> \n</ul><li><a href="#changelog">Changelog</a></li> \n<li><a href="#license">License</a></li>',f=y(),I=b("h2"),I.textContent="Installation",M=y(),O=b("pre"),E=y(),H=b("h2"),H.textContent="Usage",T=y(),L=b("h3"),L.textContent="Basic",_=y(),C=b("p"),C.innerHTML='Use the <a href="https://svelte.dev/docs#bind_element"><code>bind:this</code></a> directive to pass an element reference to the <code>IntersectionObserver</code> component.',A=y(),P=b("p"),P.innerHTML="Then, simply bind to the reactive <code>intersecting</code> prop to determine if the element intersects the viewport.",N=y(),S=b("div"),D=b("header"),R=v(gt),z=y(),nn(q.$$.fragment),W=b("pre"),G=y(),F=b("h3"),F.textContent="Once",V=y(),Y=b("p"),Y.innerHTML="Set <code>once</code> to <code>true</code> for the intersection event to occur only once. The <code>element</code> will be unobserved after the first intersection event occurs.",Q=y(),X=b("div"),en=b("header"),an=v(ft),on=y(),nn(pn.$$.fragment),ln=b("pre"),un=y(),gn=b("h3"),gn.innerHTML="<code>let:intersecting</code>",mn=y(),hn=b("p"),hn.innerHTML="An alternative to binding to the <code>intersecting</code> prop is to use the <code>let:</code> directive.",bn=y(),vn=b("p"),vn.textContent="In the following example, the “Hello world” element will fade in when its containing element intersects the viewport.",yn=y(),$n=b("div"),wn=b("header"),xn=y(),nn(In.$$.fragment),Mn=b("pre"),On=y(),En=b("h3"),En.innerHTML="<code>on:observe</code> event",Hn=y(),Tn=b("p"),Tn.innerHTML="The <code>observe</code> event is dispatched when the element is first observed and also whenever an intersection event occurs.",Ln=y(),_n=b("pre"),Cn=y(),jn=b("h3"),jn.innerHTML="<code>on:intersect</code> event",An=y(),Pn=b("p"),Pn.innerHTML="As an alternative to binding the <code>intersecting</code> prop, you can listen to the <code>intersect</code> event that is dispatched if the observed element is intersecting the viewport.",Nn=y(),Sn=b("p"),Sn.innerHTML="<strong>Note</strong>: Compared to <code>on:observe</code>, <code>on:intersect</code> is dispatched only when the element is <em>intersecting the viewport</em>. In other words, <code>e.detail.isIntersecting</code> will only be <code>true</code>.",Dn=y(),Rn=b("pre"),Un=y(),zn=b("h2"),zn.textContent="API",qn=y(),Bn=b("h3"),Bn.textContent="Props",Wn=y(),Gn=b("table"),Gn.innerHTML='<thead><tr><th style="text-align:left">Name</th> \n<th style="text-align:left">Description</th> \n<th style="text-align:left">Type</th> \n<th style="text-align:left">Default value</th></tr></thead> \n<tbody><tr><td style="text-align:left">element</td> \n<td style="text-align:left">Observed element</td> \n<td style="text-align:left"><code>HTMLElement</code></td> \n<td style="text-align:left"><code>null</code></td></tr> \n<tr><td style="text-align:left">once</td> \n<td style="text-align:left">Unobserve the element after the first intersection event</td> \n<td style="text-align:left"><code>boolean</code></td> \n<td style="text-align:left"><code>false</code></td></tr> \n<tr><td style="text-align:left">intersecting</td> \n<td style="text-align:left"><code>true</code> if the observed element is intersecting the viewport</td> \n<td style="text-align:left"><code>boolean</code></td> \n<td style="text-align:left"><code>false</code></td></tr> \n<tr><td style="text-align:left">root</td> \n<td style="text-align:left">Containing element</td> \n<td style="text-align:left"><code>null</code> or <code>HTMLElement</code></td> \n<td style="text-align:left"><code>null</code></td></tr> \n<tr><td style="text-align:left">rootMargin</td> \n<td style="text-align:left">Margin offset of the containing element</td> \n<td style="text-align:left"><code>string</code></td> \n<td style="text-align:left"><code>&quot;0px&quot;</code></td></tr> \n<tr><td style="text-align:left">threshold</td> \n<td style="text-align:left">Percentage of element visibile to trigger an event</td> \n<td style="text-align:left"><code>number</code> between 0 and 1, or an array of <code>number</code>s between 0 and 1</td> \n<td style="text-align:left"><code>0</code></td></tr> \n<tr><td style="text-align:left">entry</td> \n<td style="text-align:left">Observed element metadata</td> \n<td style="text-align:left"><a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry"><code>IntersectionObserverEntry</code></a></td> \n<td style="text-align:left"><code>null</code></td></tr> \n<tr><td style="text-align:left">observer</td> \n<td style="text-align:left"><code>IntersectionObserver</code> instance</td> \n<td style="text-align:left"><a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver"><code>IntersectionObserver</code></a></td> \n<td style="text-align:left"><code>null</code></td></tr></tbody>',Fn=y(),Vn=b("h3"),Vn.textContent="Dispatched events",Yn=y(),Jn=b("ul"),Jn.innerHTML="<li><strong>on:observe</strong>: fired when the element is first observed or whenever an intersection change occurs</li> \n<li><strong>on:intersect</strong>: fired when the element is intersecting the viewport</li>",Kn=y(),Qn=b("p"),Qn.innerHTML='The <code>e.detail</code> dispatched by the <code>observe</code> and <code>intersect</code> events is an <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry"><code>IntersectionObserverEntry</code></a> interface.',Xn=y(),Zn=b("p"),Zn.innerHTML="Note that all properties in <code>IntersectionObserverEntry</code> are read-only.",nt=y(),tt=b("details"),st=b("summary"),st.innerHTML="<code>IntersectionObserverEntry</code>",et=y(),at=b("pre"),ot=y(),pt=b("h2"),pt.textContent="Changelog",ct=y(),lt=b("p"),lt.innerHTML='<a href="https://github.com/metonym/svelte-intersection-observer/tree/master/CHANGELOG.md">Changelog</a>',it=y(),rt=b("h2"),rt.textContent="License",ut=y(),dt=b("p"),dt.innerHTML='<a href="https://github.com/metonym/svelte-intersection-observer/tree/master/LICENSE">MIT</a>',$(s,"id","svelte-intersection-observer"),$(I,"id","installation"),$(O,"class","language-bash"),$(H,"id","usage"),$(L,"id","basic"),x(D,"intersecting",n[4]),$(S,"class","code-fence"),$(W,"class","language-svelte"),$(W,"data-svelte",""),$(F,"id","once"),x(en,"intersecting",n[2]),$(X,"class","code-fence"),$(ln,"class","language-svelte"),$(ln,"data-svelte",""),$(gn,"id","let%3Aintersecting"),$($n,"class","code-fence"),$(Mn,"class","language-svelte"),$(Mn,"data-svelte",""),$(En,"id","on%3Aobserve-event"),$(_n,"class","language-svelte"),$(jn,"id","on%3Aintersect-event"),$(Rn,"class","language-svelte"),$(zn,"id","api"),$(Bn,"id","props"),$(Vn,"id","dispatched-events"),$(at,"class","language-typescript"),$(pt,"id","changelog"),$(rt,"id","license"),$(t,"class","markdown-body")},m(n,h){m(n,t,h),k(t,s),k(t,e),k(t,a),k(t,o),k(t,p),k(t,c),k(t,l),k(t,i),k(t,r),k(t,u),k(t,d),k(t,g),k(t,f),k(t,I),k(t,M),k(t,O),O.innerHTML='<span class="token comment"># NPM</span>\n<span class="token function">npm</span> i svelte-intersection-observer\n\n<span class="token comment"># pnpm</span>\n<span class="token function">pnpm</span> i svelte-intersection-observer\n\n<span class="token comment"># Bun</span>\nbun i svelte-intersection-observer\n\n<span class="token comment"># Yarn</span>\n<span class="token function">yarn</span> <span class="token function">add</span> svelte-intersection-observer\n\n',k(t,E),k(t,H),k(t,T),k(t,L),k(t,_),k(t,C),k(t,A),k(t,P),k(t,N),k(t,S),k(S,D),k(D,R),k(S,z),tn(q,S,null),k(t,W),W.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> IntersectionObserver <span class="token keyword">from</span> <span class="token string">"svelte-intersection-observer"</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> element<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> intersecting<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name"><span class="token namespace">class:</span>intersecting</span><span class="token punctuation">></span></span>\n  <span class="token language-javascript"><span class="token punctuation">{</span>intersecting <span class="token operator">?</span> <span class="token string">"Element is in view"</span> <span class="token operator">:</span> <span class="token string">"Element is not in view"</span><span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IntersectionObserver</span> <span class="token language-javascript"><span class="token punctuation">{</span>element<span class="token punctuation">}</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>intersecting</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">{</span>element<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IntersectionObserver</span><span class="token punctuation">></span></span>\n',k(t,G),k(t,F),k(t,V),k(t,Y),k(t,Q),k(t,X),k(X,en),k(en,an),k(X,on),tn(pn,X,null),k(t,ln),ln.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> IntersectionObserver <span class="token keyword">from</span> <span class="token string">"svelte-intersection-observer"</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> elementOnce<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> intersectOnce<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name"><span class="token namespace">class:</span>intersecting=</span><span class="token language-javascript"><span class="token punctuation">{</span>intersectOnce<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n  <span class="token language-javascript"><span class="token punctuation">{</span>intersectOnce <span class="token operator">?</span> <span class="token string">"Element is in view"</span> <span class="token operator">:</span> <span class="token string">"Element is not in view"</span><span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IntersectionObserver</span>\n  <span class="token attr-name">once</span>\n  <span class="token attr-name">element=</span><span class="token language-javascript"><span class="token punctuation">{</span>elementOnce<span class="token punctuation">}</span></span>\n  <span class="token attr-name"><span class="token namespace">bind:</span>intersecting=</span><span class="token language-javascript"><span class="token punctuation">{</span>intersectOnce<span class="token punctuation">}</span></span>\n<span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">{</span>elementOnce<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IntersectionObserver</span><span class="token punctuation">></span></span>\n',k(t,un),k(t,gn),k(t,mn),k(t,hn),k(t,bn),k(t,vn),k(t,yn),k(t,$n),k($n,wn),k($n,xn),tn(In,$n,null),k(t,Mn),Mn.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> IntersectionObserver <span class="token keyword">from</span> <span class="token string">"svelte-intersection-observer"</span><span class="token punctuation">;</span>\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> fade <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"svelte/transition"</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> node<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token punctuation">/></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IntersectionObserver</span> <span class="token attr-name">element=</span><span class="token language-javascript"><span class="token punctuation">{</span>node<span class="token punctuation">}</span></span> <span class="token attr-name"><span class="token namespace">let:</span>intersecting</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">{</span>node<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> intersecting<span class="token punctuation">}</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IntersectionObserver</span><span class="token punctuation">></span></span>\n',k(t,On),k(t,En),k(t,Hn),k(t,Tn),k(t,Ln),k(t,_n),_n.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IntersectionObserver</span>\n  <span class="token language-javascript"><span class="token punctuation">{</span>element<span class="token punctuation">}</span></span>\n  <span class="token attr-name"><span class="token namespace">on:</span>observe=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IntersectionObserverEntry</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true | false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">{</span>element<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IntersectionObserver</span><span class="token punctuation">></span></span>\n',k(t,Cn),k(t,jn),k(t,An),k(t,Pn),k(t,Nn),k(t,Sn),k(t,Dn),k(t,Rn),Rn.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IntersectionObserver</span>\n  <span class="token language-javascript"><span class="token punctuation">{</span>element<span class="token punctuation">}</span></span>\n  <span class="token attr-name"><span class="token namespace">on:</span>intersect=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IntersectionObserverEntry</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">{</span>element<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IntersectionObserver</span><span class="token punctuation">></span></span>\n',k(t,Un),k(t,zn),k(t,qn),k(t,Bn),k(t,Wn),k(t,Gn),k(t,Fn),k(t,Vn),k(t,Yn),k(t,Jn),k(t,Kn),k(t,Qn),k(t,Xn),k(t,Zn),k(t,nt),k(t,tt),k(tt,st),k(tt,et),k(tt,at),at.innerHTML='<span class="token keyword">interface</span> <span class="token class-name">IntersectionObserverEntry</span> <span class="token punctuation">{</span>\n  target<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>\n  time<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  isIntersecting<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  isVisible<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  intersectionRatio<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  intersectionRect<span class="token operator">:</span> <span class="token punctuation">{</span>\n    bottom<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    top<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  rootBounds<span class="token operator">:</span> <span class="token punctuation">{</span>\n    bottom<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    top<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  boundingClientRect<span class="token operator">:</span> <span class="token punctuation">{</span>\n    bottom<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    top<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n',k(t,ot),k(t,pt),k(t,ct),k(t,lt),k(t,it),k(t,rt),k(t,ut),k(t,dt),kt=!0},p(n,[t]){(!kt||16&t)&&gt!==(gt=n[4]?"Element is in view":"Element is not in view")&&w(R,gt),(!kt||16&t)&&x(D,"intersecting",n[4]);const s={};1&t&&(s.element=n[0]),1025&t&&(s.$$scope={dirty:t,ctx:n}),!B&&16&t&&(B=!0,s.intersecting=n[4],U((()=>B=!1))),q.$set(s),(!kt||4&t)&&ft!==(ft=n[2]?"Element is in view":"Element is not in view")&&w(an,ft),(!kt||4&t)&&x(en,"intersecting",n[2]);const e={};2&t&&(e.element=n[1]),1026&t&&(e.$$scope={dirty:t,ctx:n}),!cn&&4&t&&(cn=!0,e.intersecting=n[2],U((()=>cn=!1))),pn.$set(e);const a={};8&t&&(a.element=n[3]),1048&t&&(a.$$scope={dirty:t,ctx:n}),In.$set(a)},i(n){kt||(J(q.$$.fragment,n),J(pn.$$.fragment,n),J(In.$$.fragment,n),kt=!0)},o(n){K(q.$$.fragment,n),K(pn.$$.fragment,n),K(In.$$.fragment,n),kt=!1},d(n){n&&h(t),sn(q),sn(pn),sn(In)}}}function hn(n,t,s){let e,a,o,p,c;return[e,o,p,c,a,function(n){j[n?"unshift":"push"]((()=>{e=n,s(0,e)}))},function(n){a=n,s(4,a)},function(n){j[n?"unshift":"push"]((()=>{o=n,s(1,o)}))},function(n){p=n,s(2,p)},function(n){j[n?"unshift":"push"]((()=>{c=n,s(3,c)}))}]}return new class extends an{constructor(n){super(),en(this,n,hn,mn,p,{})}}({target:document.body})}();
