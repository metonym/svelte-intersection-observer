var app=function(){"use strict";function n(){}function t(n){return n()}function e(){return Object.create(null)}function s(n){n.forEach(t)}function a(n){return"function"==typeof n}function o(n,t){return n!=n?t==t:n!==t}function p(n,t,e,s){return n[1]&&s?function(n,t){for(const e in t)n[e]=t[e];return n}(e.ctx.slice(),n[1](s(t))):e.ctx}function c(n,t){n.appendChild(t)}function l(n,t,e){n.insertBefore(t,e||null)}function i(n){n.parentNode.removeChild(n)}function r(n){return document.createElement(n)}function u(n){return document.createTextNode(n)}function d(){return u(" ")}function k(n,t,e){null==e?n.removeAttribute(t):n.getAttribute(t)!==e&&n.setAttribute(t,e)}function g(n,t){t=""+t,n.wholeText!==t&&(n.data=t)}function m(n,t,e){n.classList[e?"add":"remove"](t)}let h;function f(n){h=n}function b(){if(!h)throw new Error("Function called outside component initialization");return h}function v(){const n=b();return(t,e)=>{const s=n.$$.callbacks[t];if(s){const a=function(n,t,e=!1){const s=document.createEvent("CustomEvent");return s.initCustomEvent(n,e,!1,t),s}(t,e);s.slice().forEach((t=>{t.call(n,a)}))}}}const y=[],x=[],$=[],w=[],T=Promise.resolve();let M=!1;function I(){M||(M=!0,T.then(C))}function E(n){$.push(n)}function H(n){w.push(n)}let L=!1;const O=new Set;function C(){if(!L){L=!0;do{for(let n=0;n<y.length;n+=1){const t=y[n];f(t),_(t.$$)}for(f(null),y.length=0;x.length;)x.pop()();for(let n=0;n<$.length;n+=1){const t=$[n];O.has(t)||(O.add(t),t())}$.length=0}while(y.length);for(;w.length;)w.pop()();M=!1,L=!1,O.clear()}}function _(n){if(null!==n.fragment){n.update(),s(n.before_update);const t=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,t),n.after_update.forEach(E)}}const A=new Set;function P(n,t){n&&n.i&&(A.delete(n),n.i(t))}function j(n,t,e,s){if(n&&n.o){if(A.has(n))return;A.add(n),undefined.c.push((()=>{A.delete(n),s&&(e&&n.d(1),s())})),n.o(t)}}function S(n,t,e){const s=n.$$.props[t];void 0!==s&&(n.$$.bound[s]=e,e(n.$$.ctx[s]))}function N(n){n&&n.c()}function q(n,e,o,p){const{fragment:c,on_mount:l,on_destroy:i,after_update:r}=n.$$;c&&c.m(e,o),p||E((()=>{const e=l.map(t).filter(a);i?i.push(...e):s(e),n.$$.on_mount=[]})),r.forEach(E)}function D(n,t){const e=n.$$;null!==e.fragment&&(s(e.on_destroy),e.fragment&&e.fragment.d(t),e.on_destroy=e.fragment=null,e.ctx=[])}function U(t,a,o,p,c,l,r,u=[-1]){const d=h;f(t);const k=t.$$={fragment:null,ctx:null,props:l,update:n,not_equal:c,bound:e(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(a.context||(d?d.$$.context:[])),callbacks:e(),dirty:u,skip_bound:!1,root:a.target||d.$$.root};r&&r(k.root);let g=!1;if(k.ctx=o?o(t,a.props||{},((n,e,...s)=>{const a=s.length?s[0]:e;return k.ctx&&c(k.ctx[n],k.ctx[n]=a)&&(!k.skip_bound&&k.bound[n]&&k.bound[n](a),g&&function(n,t){-1===n.$$.dirty[0]&&(y.push(n),I(),n.$$.dirty.fill(0)),n.$$.dirty[t/31|0]|=1<<t%31}(t,n)),e})):[],k.update(),g=!0,s(k.before_update),k.fragment=!!p&&p(k.ctx),a.target){if(a.hydrate){const n=function(n){return Array.from(n.childNodes)}(a.target);k.fragment&&k.fragment.l(n),n.forEach(i)}else k.fragment&&k.fragment.c();a.intro&&P(t.$$.fragment),q(t,a.target,a.anchor,a.customElement),C()}f(d)}class z{$destroy(){D(this,1),this.$destroy=n}$on(n,t){const e=this.$$.callbacks[n]||(this.$$.callbacks[n]=[]);return e.push(t),()=>{const n=e.indexOf(t);-1!==n&&e.splice(n,1)}}$set(n){var t;this.$$set&&(t=n,0!==Object.keys(t).length)&&(this.$$.skip_bound=!0,this.$$set(n),this.$$.skip_bound=!1)}}const B=n=>({intersecting:2&n,entry:1&n,observer:4&n}),R=n=>({intersecting:n[1],entry:n[0],observer:n[2]});function W(n){let t;const e=n[9].default,s=function(n,t,e,s){if(n){const a=p(n,t,e,s);return n[0](a)}}(e,n,n[8],R);return{c(){s&&s.c()},m(n,e){s&&s.m(n,e),t=!0},p(n,[a]){s&&s.p&&(!t||263&a)&&function(n,t,e,s,a,o){if(a){const c=p(t,e,s,o);n.p(c,a)}}(s,e,n,n[8],t?function(n,t,e,s){if(n[2]&&s){const a=n[2](s(e));if(void 0===t.dirty)return a;if("object"==typeof a){const n=[],e=Math.max(t.dirty.length,a.length);for(let s=0;s<e;s+=1)n[s]=t.dirty[s]|a[s];return n}return t.dirty|a}return t.dirty}(e,n[8],a,B):function(n){if(n.ctx.length>32){const t=[],e=n.ctx.length/32;for(let n=0;n<e;n++)t[n]=-1;return t}return-1}(n[8]),R)},i(n){t||(P(s,n),t=!0)},o(n){j(s,n),t=!1},d(n){s&&s.d(n)}}}function G(n,t,e){let{$$slots:s={},$$scope:a}=t,{element:o=null}=t,{once:p=!1}=t,{root:c=null}=t,{rootMargin:l="0px"}=t,{threshold:i=0}=t,{entry:r=null}=t,{intersecting:u=!1}=t,{observer:d=null}=t;const k=v();let g=null,m=null;const h=()=>{e(2,d=new IntersectionObserver((n=>{n.forEach((n=>{e(0,r=n),e(1,u=n.isIntersecting)}))}),{root:c,rootMargin:l,threshold:i}))};var f;return f=()=>(h(),()=>{d&&d.disconnect()}),b().$$.on_mount.push(f),function(n){b().$$.after_update.push(n)}((async()=>{null!==r&&(k("observe",r),r.isIntersecting&&(k("intersect",r),p&&d.unobserve(o))),await(I(),T),null!==o&&o!==m&&(d.observe(o),null!==m&&d.unobserve(m),m=o),g&&l!==g&&(d.disconnect(),m=null,h()),g=l})),n.$$set=n=>{"element"in n&&e(3,o=n.element),"once"in n&&e(4,p=n.once),"root"in n&&e(5,c=n.root),"rootMargin"in n&&e(6,l=n.rootMargin),"threshold"in n&&e(7,i=n.threshold),"entry"in n&&e(0,r=n.entry),"intersecting"in n&&e(1,u=n.intersecting),"observer"in n&&e(2,d=n.observer),"$$scope"in n&&e(8,a=n.$$scope)},[r,u,d,o,p,c,l,i,a,s]}class F extends z{constructor(n){super(),U(this,n,G,W,o,{element:3,once:4,root:5,rootMargin:6,threshold:7,entry:0,intersecting:1,observer:2})}}function V(t){let e,s;return{c(){e=r("div"),e.textContent="Hello world",s=d()},m(n,a){l(n,e,a),t[4](e),l(n,s,a)},p:n,d(n){n&&i(e),t[4](null),n&&i(s)}}}function Y(t){let e,s;return{c(){e=r("div"),e.textContent="Hello world",s=d()},m(n,a){l(n,e,a),t[6](e),l(n,s,a)},p:n,d(n){n&&i(e),t[6](null),n&&i(s)}}}function J(n){let t,e,s,a,o,p,h,f,b,v,y,$,w,T,M,I,E,L,O,C,_,A,U,z,B,R,W,G,J,K,Q,X,Z,nn,tn,en,sn,an,on,pn,cn,ln,rn,un,dn,kn,gn,mn,hn,fn,bn,vn,yn,xn,$n,wn,Tn,Mn,In,En,Hn,Ln,On,Cn,_n,An,Pn,jn,Sn,Nn,qn,Dn,Un,zn,Bn,Rn,Wn,Gn,Fn,Vn,Yn,Jn,Kn,Qn,Xn,Zn,nt,tt,et,st,at,ot,pt,ct,lt,it,rt,ut,dt,kt,gt,mt,ht,ft,bt,vt=n[1]?"Element is in view":"Element is not in view",yt=n[3]?"Element is in view":"Element is not in view";function xt(t){n[5](t)}let $t={element:n[0],$$slots:{default:[V]},$$scope:{ctx:n}};function wt(t){n[7](t)}void 0!==n[1]&&($t.intersecting=n[1]),sn=new F({props:$t}),x.push((()=>S(sn,"intersecting",xt)));let Tt={once:!0,element:n[2],$$slots:{default:[Y]},$$scope:{ctx:n}};return void 0!==n[3]&&(Tt.intersecting=n[3]),hn=new F({props:Tt}),x.push((()=>S(hn,"intersecting",wt))),{c(){t=r("main"),e=r("h1"),e.textContent="svelte-intersection-observer",s=d(),a=r("p"),a.innerHTML='<a href="https://npmjs.com/package/svelte-intersection-observer"><img src="https://img.shields.io/npm/v/svelte-intersection-observer.svg?color=%23ff3e00&amp;style=for-the-badge" alt="NPM"/></a>',o=d(),p=r("blockquote"),p.innerHTML='<p>Detect if an element is in the viewport using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a>.</p>',h=d(),f=r("p"),f.innerHTML='<a href="https://github.com/metonym/svelte-intersection-observer.git">GitHub repo</a>',b=d(),v=r("p"),v.innerHTML='Try it in the <a href="https://svelte.dev/repl/8cd2327a580c4f429c71f7df999bd51d">Svelte REPL</a>.',y=d(),$=r("p"),$.innerHTML="<strong>Table of Contents</strong>",w=r("ul"),w.innerHTML='<li><a href="#installation">Installation</a></li> \n<li><a href="#usage">Usage</a></li> \n<ul><li><a href="#basic">Basic</a></li> \n<li><a href="#once">Once</a></li> \n<li><a href="#on%3Aobserve-event">on:observe event</a></li> \n<li><a href="#on%3Aintersect-event">on:intersect event</a></li> \n</ul><li><a href="#api">API</a></li> \n<ul><li><a href="#props">Props</a></li> \n<li><a href="#dispatched-events">Dispatched events</a></li> \n</ul><li><a href="#examples">Examples</a></li> \n<li><a href="#typescript-support">TypeScript support</a></li> \n<li><a href="#changelog">Changelog</a></li> \n<li><a href="#license">License</a></li>',T=d(),M=r("h2"),M.textContent="Installation",I=d(),E=r("p"),E.innerHTML="<strong>Yarn</strong>",L=d(),O=r("pre"),C=d(),_=r("p"),_.innerHTML="<strong>NPM</strong>",A=d(),U=r("pre"),z=d(),B=r("h2"),B.textContent="Usage",R=d(),W=r("h3"),W.textContent="Basic",G=d(),J=r("p"),J.innerHTML='Use the <a href="https://svelte.dev/docs#bind_element"><code>bind:this</code></a> directive to pass an element reference to the <code>IntersectionObserver</code> component.',K=d(),Q=r("p"),Q.innerHTML="Then, simply bind to the reactive <code>intersecting</code> prop to determine if the element intersects the viewport.",X=d(),Z=r("div"),nn=r("header"),tn=u(vt),en=d(),N(sn.$$.fragment),on=r("pre"),pn=d(),cn=r("h3"),cn.textContent="Once",ln=d(),rn=r("p"),rn.innerHTML="Set <code>once</code> to <code>true</code> for the intersection event to occur only once. The <code>element</code> will be unobserved after the first intersection event occurs.",un=d(),dn=r("div"),kn=r("header"),gn=u(yt),mn=d(),N(hn.$$.fragment),bn=r("pre"),vn=d(),yn=r("h3"),yn.textContent="on:observe event",xn=d(),$n=r("p"),$n.innerHTML="The <code>observe</code> event is dispatched when the element is first observed and also whenever an intersection event occurs.",wn=d(),Tn=r("pre"),Mn=d(),In=r("h3"),In.textContent="on:intersect event",En=d(),Hn=r("p"),Hn.innerHTML="As an alternative to binding the <code>intersecting</code> prop, you can listen to the <code>intersect</code> event that is dispatched if the observed element is intersecting the viewport.",Ln=d(),On=r("p"),On.innerHTML="<strong>Note</strong>: Compared to <code>on:observe</code>, <code>on:intersect</code> is dispatched only when the element is <em>intersecting the viewport</em>. In other words, <code>e.detail.isIntersecting</code> will only be <code>true</code>.",Cn=d(),_n=r("pre"),An=d(),Pn=r("h2"),Pn.textContent="API",jn=d(),Sn=r("h3"),Sn.textContent="Props",Nn=d(),qn=r("table"),qn.innerHTML='<thead><tr><th style="text-align:left">Name</th> \n<th style="text-align:left">Description</th> \n<th style="text-align:left">Type</th> \n<th style="text-align:left">Default value</th></tr></thead> \n<tbody><tr><td style="text-align:left">element</td> \n<td style="text-align:left">Element observed for intersection</td> \n<td style="text-align:left"><code>HTMLElement</code></td> \n<td style="text-align:left"><code>null</code></td></tr> \n<tr><td style="text-align:left">once</td> \n<td style="text-align:left">If <code>true</code>, the observed element will be unobserved upon intersection</td> \n<td style="text-align:left"><code>boolean</code></td> \n<td style="text-align:left"><code>false</code></td></tr> \n<tr><td style="text-align:left">intersecting</td> \n<td style="text-align:left"><code>true</code> if the observed element is intersecting the viewport</td> \n<td style="text-align:left"><code>boolean</code></td> \n<td style="text-align:left"><code>false</code></td></tr> \n<tr><td style="text-align:left">root</td> \n<td style="text-align:left">Containing element</td> \n<td style="text-align:left"><code>null</code> or <code>HTMLElement</code></td> \n<td style="text-align:left"><code>null</code></td></tr> \n<tr><td style="text-align:left">rootMargin</td> \n<td style="text-align:left">Margin offset of the containing element</td> \n<td style="text-align:left"><code>string</code></td> \n<td style="text-align:left"><code>&quot;0px&quot;</code></td></tr> \n<tr><td style="text-align:left">threshold</td> \n<td style="text-align:left">Percentage of element visibility to trigger an event</td> \n<td style="text-align:left"><code>number</code> between 0 and 1</td> \n<td style="text-align:left"><code>0</code></td></tr> \n<tr><td style="text-align:left">entry</td> \n<td style="text-align:left">Observed element metadata</td> \n<td style="text-align:left"><a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry"><code>IntersectionObserverEntry</code></a></td> \n<td style="text-align:left"><code>null</code></td></tr> \n<tr><td style="text-align:left">observer</td> \n<td style="text-align:left">IntersectionObserver instance</td> \n<td style="text-align:left"><a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver"><code>IntersectionObserver</code></a></td> \n<td style="text-align:left"><code>null</code></td></tr></tbody>',Dn=d(),Un=r("h3"),Un.textContent="Dispatched events",zn=d(),Bn=r("ul"),Bn.innerHTML="<li><strong>on:observe</strong>: fired when the element is first observed or whenever an intersection change occurs</li> \n<li><strong>on:intersect</strong>: fired when the element is intersecting the viewport</li>",Rn=d(),Wn=r("p"),Wn.innerHTML='The <code>e.detail</code> dispatched by the <code>observe</code> and <code>intersect</code> events is an <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry"><code>IntersectionObserverEntry</code></a> interface.',Gn=d(),Fn=r("p"),Fn.innerHTML="Note that all properties in <code>IntersectionObserverEntry</code> are read only.",Vn=d(),Yn=r("details"),Jn=r("summary"),Jn.innerHTML="<code>IntersectionObserverEntry</code>",Kn=d(),Qn=r("pre"),Xn=d(),Zn=r("h2"),Zn.textContent="Examples",nt=d(),tt=r("p"),tt.innerHTML='The <a href="https://github.com/metonym/svelte-intersection-observer/tree/master/examples/">examples folder</a> contains sample set-ups.',et=d(),st=r("ul"),st.innerHTML='<li><a href="https://github.com/metonym/svelte-intersection-observer/tree/master/examples/sveltekit">examples/sveltekit</a></li> \n<li><a href="https://github.com/metonym/svelte-intersection-observer/tree/master/examples/svite">examples/svite</a></li> \n<li><a href="https://github.com/metonym/svelte-intersection-observer/tree/master/examples/sapper">examples/sapper</a></li> \n<li><a href="https://github.com/metonym/svelte-intersection-observer/tree/master/examples/snowpack">examples/snowpack</a></li> \n<li><a href="https://github.com/metonym/svelte-intersection-observer/tree/master/examples/rollup">examples/rollup</a></li> \n<li><a href="https://github.com/metonym/svelte-intersection-observer/tree/master/examples/webpack">examples/webpack</a></li>',at=d(),ot=r("h2"),ot.textContent="TypeScript support",pt=d(),ct=r("p"),ct.textContent="Svelte version 3.31 or greater is required to use this module with TypeScript.",lt=d(),it=r("p"),it.innerHTML='TypeScript definitions for this component are located in the <a href="https://github.com/metonym/svelte-intersection-observer/tree/master/types/">types folder</a>.',rt=d(),ut=r("h2"),ut.textContent="Changelog",dt=d(),kt=r("p"),kt.innerHTML='<a href="https://github.com/metonym/svelte-intersection-observer/tree/master/CHANGELOG.md">Changelog</a>',gt=d(),mt=r("h2"),mt.textContent="License",ht=d(),ft=r("p"),ft.innerHTML='<a href="https://github.com/metonym/svelte-intersection-observer/tree/master/LICENSE">MIT</a>',k(e,"id","svelte-intersection-observer"),k(M,"id","installation"),k(O,"class","language-bash"),k(U,"class","language-bash"),k(B,"id","usage"),k(W,"id","basic"),m(nn,"intersecting",n[1]),k(Z,"class","code-fence"),k(on,"class","language-svelte"),k(on,"data-svelte",""),k(cn,"id","once"),m(kn,"intersecting",n[3]),k(dn,"class","code-fence"),k(bn,"class","language-svelte"),k(bn,"data-svelte",""),k(yn,"id","on%3Aobserve-event"),k(Tn,"class","language-html"),k(In,"id","on%3Aintersect-event"),k(_n,"class","language-html"),k(Pn,"id","api"),k(Sn,"id","props"),k(Un,"id","dispatched-events"),k(Qn,"class","language-typescript"),k(Zn,"id","examples"),k(ot,"id","typescript-support"),k(ut,"id","changelog"),k(mt,"id","license"),k(t,"class","markdown-body")},m(n,i){l(n,t,i),c(t,e),c(t,s),c(t,a),c(t,o),c(t,p),c(t,h),c(t,f),c(t,b),c(t,v),c(t,y),c(t,$),c(t,w),c(t,T),c(t,M),c(t,I),c(t,E),c(t,L),c(t,O),O.innerHTML='<span class="token function">yarn</span> <span class="token function">add</span> -D svelte-intersection-observer\n',c(t,C),c(t,_),c(t,A),c(t,U),U.innerHTML='<span class="token function">npm</span> i -D svelte-intersection-observer\n',c(t,z),c(t,B),c(t,R),c(t,W),c(t,G),c(t,J),c(t,K),c(t,Q),c(t,X),c(t,Z),c(Z,nn),c(nn,tn),c(Z,en),q(sn,Z,null),c(t,on),on.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> IntersectionObserver <span class="token keyword">from</span> <span class="token string">"svelte-intersection-observer"</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> element<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> intersecting<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name"><span class="token namespace">class:</span>intersecting</span><span class="token punctuation">></span></span>\n  <span class="token language-javascript"><span class="token punctuation">{</span>intersecting <span class="token operator">?</span> <span class="token string">"Element is in view"</span> <span class="token operator">:</span> <span class="token string">"Element is not in view"</span><span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IntersectionObserver</span> <span class="token language-javascript"><span class="token punctuation">{</span>element<span class="token punctuation">}</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>intersecting</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">{</span>element<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IntersectionObserver</span><span class="token punctuation">></span></span>\n',c(t,pn),c(t,cn),c(t,ln),c(t,rn),c(t,un),c(t,dn),c(dn,kn),c(kn,gn),c(dn,mn),q(hn,dn,null),c(t,bn),bn.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> element2<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> intersectOnce<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name"><span class="token namespace">class:</span>intersecting=</span><span class="token language-javascript"><span class="token punctuation">{</span>intersectOnce<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n  <span class="token language-javascript"><span class="token punctuation">{</span>intersectOnce <span class="token operator">?</span> <span class="token string">"Element is in view"</span> <span class="token operator">:</span> <span class="token string">"Element is not in view"</span><span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IntersectionObserver</span> <span class="token attr-name">once</span> <span class="token attr-name">element=</span><span class="token language-javascript"><span class="token punctuation">{</span>element2<span class="token punctuation">}</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>intersecting=</span><span class="token language-javascript"><span class="token punctuation">{</span>intersectOnce<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">{</span>element2<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IntersectionObserver</span><span class="token punctuation">></span></span>\n',c(t,vn),c(t,yn),c(t,xn),c(t,$n),c(t,wn),c(t,Tn),Tn.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IntersectionObserver</span>\n  <span class="token attr-name">{element}</span>\n  <span class="token attr-name"><span class="token namespace">on:</span>observe</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{(e) => {\n    console.log(e.detail); // IntersectionObserverEntry\n    console.log(e.detail.isIntersecting); // true | false\n  }}<span class="token punctuation">"</span></span>\n<span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">bind:</span>this</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{element}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IntersectionObserver</span><span class="token punctuation">></span></span>\n',c(t,Mn),c(t,In),c(t,En),c(t,Hn),c(t,Ln),c(t,On),c(t,Cn),c(t,_n),_n.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IntersectionObserver</span>\n  <span class="token attr-name">{element}</span>\n  <span class="token attr-name"><span class="token namespace">on:</span>intersect</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{(e) => {\n    console.log(e.detail); // IntersectionObserverEntry\n    console.log(e.detail.isIntersecting); // true\n  }}<span class="token punctuation">"</span></span>\n<span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">bind:</span>this</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{element}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IntersectionObserver</span><span class="token punctuation">></span></span>\n',c(t,An),c(t,Pn),c(t,jn),c(t,Sn),c(t,Nn),c(t,qn),c(t,Dn),c(t,Un),c(t,zn),c(t,Bn),c(t,Rn),c(t,Wn),c(t,Gn),c(t,Fn),c(t,Vn),c(t,Yn),c(Yn,Jn),c(Yn,Kn),c(Yn,Qn),Qn.innerHTML='<span class="token keyword">interface</span> <span class="token class-name">IntersectionObserverEntry</span> <span class="token punctuation">{</span>\n  target<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>\n  time<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  isIntersecting<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  isVisible<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  intersectionRatio<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  intersectionRect<span class="token operator">:</span> <span class="token punctuation">{</span>\n    bottom<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    top<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  rootBounds<span class="token operator">:</span> <span class="token punctuation">{</span>\n    bottom<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    top<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  boundingClientRect<span class="token operator">:</span> <span class="token punctuation">{</span>\n    bottom<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    top<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n',c(t,Xn),c(t,Zn),c(t,nt),c(t,tt),c(t,et),c(t,st),c(t,at),c(t,ot),c(t,pt),c(t,ct),c(t,lt),c(t,it),c(t,rt),c(t,ut),c(t,dt),c(t,kt),c(t,gt),c(t,mt),c(t,ht),c(t,ft),bt=!0},p(n,[t]){(!bt||2&t)&&vt!==(vt=n[1]?"Element is in view":"Element is not in view")&&g(tn,vt),2&t&&m(nn,"intersecting",n[1]);const e={};1&t&&(e.element=n[0]),257&t&&(e.$$scope={dirty:t,ctx:n}),!an&&2&t&&(an=!0,e.intersecting=n[1],H((()=>an=!1))),sn.$set(e),(!bt||8&t)&&yt!==(yt=n[3]?"Element is in view":"Element is not in view")&&g(gn,yt),8&t&&m(kn,"intersecting",n[3]);const s={};4&t&&(s.element=n[2]),260&t&&(s.$$scope={dirty:t,ctx:n}),!fn&&8&t&&(fn=!0,s.intersecting=n[3],H((()=>fn=!1))),hn.$set(s)},i(n){bt||(P(sn.$$.fragment,n),P(hn.$$.fragment,n),bt=!0)},o(n){j(sn.$$.fragment,n),j(hn.$$.fragment,n),bt=!1},d(n){n&&i(t),D(sn),D(hn)}}}function K(n,t,e){let s,a,o,p;return[s,a,o,p,function(n){x[n?"unshift":"push"]((()=>{s=n,e(0,s)}))},function(n){a=n,e(1,a)},function(n){x[n?"unshift":"push"]((()=>{o=n,e(2,o)}))},function(n){p=n,e(3,p)}]}return new class extends z{constructor(n){super(),U(this,n,K,J,o,{})}}({target:document.body})}();
